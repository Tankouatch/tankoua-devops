
def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('UTC'))
pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2', daysToKeepStr: '2'))
        disableConcurrentBuilds()
        timestamps()
    }
    parameters {
        string (name: 'branchName', defaultValue: 'develop', description: 'The branch name docker image')
        string (name: 'resource', defaultValue: 'ec2', description: 'The resource name folder')
        booleanParam (name: 'apply', defaultValue: 'false', description: 'True will run terrafrom apply')
        choice (name: 'environment', choices: '\ndev\nqa\nprod', description: 'Deployment mode')
    }
    stages {
        stage ('checkout') {
            steps {
                dir("${WORKSPACE}/scr") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.branchName}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'LocalBranch']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                        url: 'https://github.com/leonardtia1/tia-devops.git',
                        credentialsId: 'tia-github-token'
                        ]]
                    ])
                }
            }
        }
        stage('Terraform init/plan') {
            steps {
                dir("${WORKSPACE}/scr/pipeline/terraform/resources/${params.environment}/${params.resource}") {
                    script {
                        docker.withRegistry('','tia-dockerhub-credentials') {
                            docker.image("leonardtia/devops-test-repo:develop").inside() {
                                if(params.environment == 'dev') {
                                    withCredentials([usernamePassword(credentialsId: 'aws-dev-access', usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY')]) {
                                    sh """
                                    export AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY}
                                    export AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_KEY}
                                    export AWS_DEFAULT_REGION=${params.awsRegion}
                                
                                    terraform init
                                    terraform validate
                                    terraform plan
                                    """ 
                                    }
                                }
                                if(params.environment == 'dev') {
                                    withCredentials([usernamePassword(credentialsId: 'aws-qa-access', usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY')]) {
                                    sh """
                                    export AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY}
                                    export AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_KEY}
                                    export AWS_DEFAULT_REGION=${params.awsRegion}
                                
                                    terraform init
                                    terraform validate
                                    terraform plan
                                    """ 
                                    }
                                }
                                if(params.environment == 'prod') {
                                    withCredentials([usernamePassword(credentialsId: 'aws-prod-access', usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY')]) {
                                    sh """
                                    export AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY}
                                    export AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_KEY}
                                    export AWS_DEFAULT_REGION=${params.awsRegion}
                                
                                    terraform init
                                    terraform validate
                                    terraform plan
                                    """ 
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Terraform apply') {
            steps {
                dir("${WORKSPACE}/scr/pipeline/terraform/resources/${params.environment}/${params.resource}") {
                    script {
                        docker.withRegistry('','tia-dockerhub-credentials') {
                            docker.image("leonardtia/devops-test-repo:develop").inside() {
                                if(params.environment == 'dev') {
                                    withCredentials([usernamePassword(credentialsId: 'aws-dev-access', usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY')]) {
                                    sh """
                                    export AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY}
                                    export AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_KEY}
                                    export AWS_DEFAULT_REGION=${params.awsRegion}
                                
                                    terraform apply -auto-approve
                                    """ 
                                    }
                                }
                                if(params.environment == 'dev') {
                                    withCredentials([usernamePassword(credentialsId: 'aws-qa-access', usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY')]) {
                                    sh """
                                    export AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY}
                                    export AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_KEY}
                                    export AWS_DEFAULT_REGION=${params.awsRegion}
                                
                                    terraform apply -auto-approve
                                    """ 
                                    }
                                }
                                if(params.environment == 'prod') {
                                    withCredentials([usernamePassword(credentialsId: 'aws-prod-access', usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY')]) {
                                    sh """
                                    export AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY}
                                    export AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_KEY}
                                    export AWS_DEFAULT_REGION=${params.awsRegion}
                                
                                    terraform apply -auto-approve
                                    """ 
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend baseUrl: 'https://hooks.slack.com/services/',
            channel: 'learning', 
            color: '#BDFFC3', 
            message: 'Project Name : ' + JOB_NAME + ' \n Build Status : Build number ' + currentBuild.displayName + ' finished with status: SUCCESS ===> GOOD JOB! \n Build URL : ' + BUILD_URL, 
            teamDomain: 'Devops easy learning', 
            tokenCredentialId: 'tia-slack-token'
        }
        failure {
            slackSend baseUrl: 'https://hooks.slack.com/services/',
            channel: 'learning', 
            color: '#FF9FA1', 
            message: 'Project Name : ' + JOB_NAME + ' \n Build Status : Build number ' + currentBuild.displayName + ' finished with status: FAILED ===> Please check the console output to fix this job IMMEDIATELY ===> THANKS. \n Build URL : ' + BUILD_URL, 
            teamDomain: 'Devops easy learning', 
            tokenCredentialId: 'tia-slack-token'
        }
        unstable {
            slackSend baseUrl: 'https://hooks.slack.com/services/',
            channel: 'learning', 
            color: '#FFFE89', 
            message: 'Project Name : ' + JOB_NAME + ' \n Build Status : Build number ' + currentBuild.displayName + ' finished with status: UNSTABLE ===> Please check the console output to fix this job IMMEDIATELY ===> THANKS. \n Build URL : ' + BUILD_URL, 
            teamDomain: 'Devops easy learning', 
            tokenCredentialId: 'tia-slack-token'
        } 
    }
}
